with(new_england, {
interaction.plot(College_Location_States, SAT_ACT_required_for_Fall_2021, enrollment, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Dose * Supplement Type Interaction")
})
#new_england$SAT_ACT_required_for_Fall_2021 <- factor(new_england$SAT_ACT_required_for_Fall_2021)
with(new_england, {
interaction.plot(College_Location_States, SAT_ACT_required_for_Fall_2021, enrollment, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Dose * Supplement Type Interaction",
legend("topleft"))
})
#new_england$SAT_ACT_required_for_Fall_2021 <- factor(new_england$SAT_ACT_required_for_Fall_2021)
with(new_england, {
interaction.plot(College_Location_States, SAT_ACT_required_for_Fall_2021, enrollment, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Dose * Supplement Type Interaction",
legend = "topleft")
})
?interaction.plot
#new_england$SAT_ACT_required_for_Fall_2021 <- factor(new_england$SAT_ACT_required_for_Fall_2021)
with(new_england, {
interaction.plot(College_Location_States, SAT_ACT_required_for_Fall_2021, enrollment, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Dose * Supplement Type Interaction",
trace.label = "SAT/ACT required")
})
mytable <- xtabs(~ College_Location_States + enrollment, data = temp)
mytable <- xtabs(~ College_Location_States + enrollment, data = new_england)
(cstest <- chisq.test(mytable))
mytable <- xtabs(~ College_Location_States + enrollment, data = new_england)
(cstest <- chisq.test(mytable))
mytable <- xtabs(~ College_Location_States + enrollment, data = new_england)
(cstest <- chisq.test(mytable))
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- College[train,]
College.validate <- College[-train,]
College.train <- college_df[train,]
College.validate <- college_df[-train,]
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
college_df$SAT_ACT_required_for_Fall_2021 <- ifelse(college_df$SAT_ACT_required_for_Fall_2021 == "yes", 1, 0)
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,]
College.validate <- college_df[-train,]
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
install.packages("glmnet")
library(glmnet)
?glmnet
ridgefit <- glmnet(new_england[!var], new_england$SAT_ACT_required_for_Fall_2021, family = "binomial", alpha = 0, lambda = 0.01)
var <- c("SAT_ACT_required_for_Fall_2021")
ridgefit <- glmnet(new_england[!var], new_england$SAT_ACT_required_for_Fall_2021, family = "binomial", alpha = 0, lambda = 0.01)
var <- names(new_england) %in% c("SAT_ACT_required_for_Fall_2021")
ridgefit <- glmnet(new_england[!var], new_england$SAT_ACT_required_for_Fall_2021, family = "binomial", alpha = 0, lambda = 0.01)
var <- names(college_df) %in% c("SAT_ACT_required_for_Fall_2021")
ridgefit <- glmnet(college_df[!var], college_df$SAT_ACT_required_for_Fall_2021, family = "binomial", alpha = 0, lambda = 0.01)
summary(logistic_model)
summary(ridgefit)
names(college_df)
str(college_df)
var <- names(college_df) %in% c("regular_application", "SAT_ACT_required_for_Fall_2021", "college_names", "College_Location_Town", "College_Location_States")
ridgefit <- glmnet(college_df[!var], college_df$SAT_ACT_required_for_Fall_2021, family = "binomial", alpha = 0, lambda = 0.01)
summary(ridgefit)
ridgefit$RSS
ridgefit$dev.ratio
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,][!var]
College.validate <- college_df[-train,][!var]
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(logistic_model)
logRegPrivate.step <- step(logistic_model, direction="backward")
summary(logRegPrivate.step)
prob <- predict(logRegPrivate.step, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,][!var]
College.validate <- college_df[-train,][!var]
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(logistic_model)
prob <- predict(logistic_model, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
logRegPrivate.step <- step(logistic_model, direction="backward")
summary(logRegPrivate.step)
prob <- predict(logRegPrivate.step, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
prob <- predict(logRegPrivate.step, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf2 <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf2
performance(logit.perf)
library(ISLR)
performance(logit.perf)
performance <- function(table, n=2){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fn)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste("Sensitivity = ", round(sensitivity, n) ,
"\nSpecificity = ", round(specificity, n),
"\nPositive Predictive Value = ", round(ppp, n),
"\nNegative Predictive Value = ", round(npp, n),
"\nAccuracy = ", round(hitrate, n), "\n", sep="")
cat(result)
}
performance(logit.perf)
performance(logit.perf2)
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(logistic_model)
prob <- predict(logistic_model, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
logRegPrivate.step <- step(logistic_model, direction="backward")
summary(logRegPrivate.step)
prob <- predict(logRegPrivate.step, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf2 <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf2
performance <- function(table, n=2){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fn)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste("Sensitivity = ", round(sensitivity, n) ,
"\nSpecificity = ", round(specificity, n),
"\nPositive Predictive Value = ", round(ppp, n),
"\nNegative Predictive Value = ", round(npp, n),
"\nAccuracy = ", round(hitrate, n), "\n", sep="")
cat(result)
}
performance(logit.perf)
performance(logit.perf2)
?vis_miss
str(college_df)
?read_html
?html_nodes
names(college_df)
# Some global options you might use if you like
knitr::opts_chunk$set(comment = NA) # if you want to remove hashes from all output
knitr::opts_chunk$set(out.width="80%") # if you want to resize the output figure
options(width = 80) # to set the max. number of characters to 80
library(rvest)
library(dplyr)
link <- paste("https://money.com/best-colleges/")
pg <-  read_html(link)
library(rvest)
library(dplyr)
link <- paste("https://money.com/best-colleges/")
pg <-  read_html(link)
college_names <- pg %>% html_nodes("._1RI9D22X") %>% html_text() #This gets all the college names into a vector
Est_price_2020_21_without_aid <- pg %>% html_nodes("td:nth-child(2)") %>% html_text()
Est_price_with_average_grant <- pg %>% html_nodes("td:nth-child(3)") %>% html_text()
percent_of_students_who_get_any_grants <- pg %>% html_nodes("td:nth-child(4)") %>% html_text()
graduation_rate <- pg %>% html_nodes("td:nth-child(5)") %>% html_text()
average_student_debt <- pg %>% html_nodes("td:nth-child(6)") %>% html_text()
early_career_earnings <- pg %>% html_nodes("td:nth-child(7)") %>% html_text()
college_location <- pg %>% html_nodes("._1OtZ7j1R") %>% html_text()
df <- data.frame(matrix(ncol = 19, nrow = 0))
baselink <- "https://money.com"
for (i in 1:748){
sel <- paste("tr:nth-child(", i, ") ._1RI9D22X", sep="")
restlink <- pg %>% html_nodes(sel) %>% html_attr("href")
gotolink <- paste(baselink, restlink, sep="")
datapg <- read_html(gotolink)
vals <- datapg %>% html_nodes(".small-3") %>% html_text()
vals2 <- datapg %>% html_nodes(".small-2") %>% html_text()
temp <- append(vals, vals2)
df <- rbind(df, temp)
}
write.csv(df,"college_data.csv", row.names = FALSE)
college_df <- df
rm(df)
coln <- c("est_full_Price_2020_2021",
"est_price_for_students_who_receive_aid",
"average_price_for_low_income_students",
"acceptance_rate",
"median_SAT_ACT_score",
"SAT_ACT_required_for_Fall_2021",
"enrollment",
"percent_of_need_met",
"percent_of_students_who_get_merit_grants",
"average_merit_grant",
"graduation_rate",
"average_time_to_a_degree",
"average_student_debt",
"average_salary_within_5_years",
"percent_earning_more_than_28000",
"early_decision_application",
"regular_application",
"percent_of_students_who_get_any_grants",
"percent_of_students_with_need_who_get_grants"
)
names(college_df) <- coln
college_df["Est_price_2020_21_without_aid"] <- Est_price_2020_21_without_aid
college_df["college_names"] <- college_names
college_df["Est_price_with_average_grant"] <- Est_price_with_average_grant
college_df["early_career_earnings"] <- early_career_earnings
college_df["college_location"] <- college_location
str(college_df)
library(tidyr)
library(tidyr)
replace_with_null <- function(data, ind){
temp <- trimws(data[,ind])
return(replace(temp, which(temp == "NA" | temp == "N/A"), NA))
}
cleandfcol <- function(data, ind){
vec <- replace_with_null(data, ind)
nonavec <- vec[!is.na(vec)]
if (sum(substr(nonavec, start = 3, stop = 3) == "%") > 0){
vec <- gsub("%", "", vec)
return(as.numeric(vec))
}
else if (sum(substr(nonavec, start = 1, stop = 1) == "$") > 0){
vec <- sub('.', '', gsub(",", "", vec))
return(as.numeric(vec))
}
else if (sum(grepl(",", data[,ind], fixed = TRUE)) > 0){
vec <- gsub(",", "", vec)
return(as.numeric(vec))
}
else {
vec <- gsub("years", "", vec)
return(as.numeric(vec))
}
}
for (i in c(1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23)){
college_df[,i] <- cleandfcol(college_df, i)
}
college_df <- separate(college_df, 5, c("Median_SAT_Score", "Median_ACT_Score"), "/", remove=TRUE, convert = TRUE)
college_df <- separate(college_df, 25, c("College_Location_Town", "College_Location_States"), ",", remove=TRUE, convert = TRUE)
college_df$College_Location_States <- trimws(college_df$College_Location_States)
for (i in c(7, 17, 18, 22, 25)){
college_df[,i] <- replace_with_null(college_df, i)
}
college_df <- college_df[!duplicated(college_df), ]
college_df <- college_df[!duplicated(as.list(college_df))]
str(college_df)
library(visdat)
library(naniar)
library(missForest)
library(visdat)
library(naniar)
library(missForest)
vis_miss(college_df)
gg_miss_var(college_df)
sum(is.na(college_df))
college_df = subset(college_df, select = -c(early_decision_application))
numintdata <- college_df[,sapply(college_df,is.numeric) | sapply(college_df,is.integer)]
categoricaldata <- college_df[,sapply(college_df,is.character)]
numintdata.imp <- missForest(numintdata)
numintdata.imp$OOBerror
vis_miss(categoricaldata)
#Source:
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
mfreq <- calc_mode(categoricaldata$regular_application)
mfreq #The more frequent regular application deadline in rolling
categoricaldata$regular_application = if_else(is.na(categoricaldata$regular_application),
mfreq,
categoricaldata$regular_application)
vis_miss(categoricaldata)
vis_miss(numintdata.imp$ximp)
college_df <- cbind(numintdata.imp$ximp, categoricaldata)
vis_miss(college_df)
library(psych)
library(vioplot)
library(psych)
library(vioplot)
psych::describe(college_df)
CT <- college_df[which(college_df$College_Location_States == "CT"),]
#summary(CT)
ME <- college_df[which(college_df$College_Location_States == "ME"),]
#summary(ME)
MA <- college_df[which(college_df$College_Location_States == "MA"),]
#summary(MA)
NH <- college_df[which(college_df$College_Location_States == "NH"),]
#summary(NH)
RI <- college_df[which(college_df$College_Location_States == "RI"),]
#summary(RI)
VT <- college_df[which(college_df$College_Location_States == "VT"),]
#summary(VT)
new_england <- college_df[which(college_df$College_Location_States %in% c("CT",
"MA",
"ME",
"NH",
"RI",
"VT")),]
summary(new_england)
boxplot(CT$est_full_Price_2020_2021,
ME$est_full_Price_2020_2021,
MA$est_full_Price_2020_2021,
NH$est_full_Price_2020_2021,
RI$est_full_Price_2020_2021,
VT$est_full_Price_2020_2021,
col=c("gold", "darkgreen", "red", "blue","purple", "pink"),
main="Distribution of Estimated Full Price for the 2020 - 2021 academic year Amongst Univeristies in New England",
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
xlab="State",
ylab="Price ($)")
(tab <- table(new_england$SAT_ACT_required_for_Fall_2021, new_england$College_Location_States))
barplot(tab,
main="Stacked Bar Plot of SAT or ACT required for Fall 2021",
xlab="State",
ylab="Frequency",
col=c("red", "yellow"),
legend=rownames(tab))
pairs.panels(new_england[c("acceptance_rate",
"est_price_for_students_who_receive_aid",
"est_full_Price_2020_2021",
"percent_of_need_met",
"average_merit_grant",
"average_student_debt",
"average_price_for_low_income_students",
"percent_of_students_who_get_merit_grants",
"average_salary_within_5_years")],
lm = TRUE)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
vioplot(CT$enrollment, ME$enrollment, MA$enrollment,
NH$enrollment, RI$enrollment, VT$enrollment,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="gold",
main = "Violinplot of Enrollment",
xlab ="State",
ylab = "Enrollment")
vioplot(CT$Median_SAT_Score, ME$Median_SAT_Score, MA$Median_SAT_Score,
NH$Median_SAT_Score, RI$Median_SAT_Score, VT$Median_SAT_Score,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="blue",
main = "Violinplot of Median SAT Score",
xlab ="State",
ylab = "Median SAT Score")
vioplot(CT$average_student_debt, ME$average_student_debt, MA$average_student_debt,
NH$average_student_debt, RI$average_student_debt, VT$average_student_debt,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="orange",
main = "Violinplot of Average Student Debt",
xlab ="State",
ylab = "Avg. Debt")
vioplot(CT$average_time_to_a_degree, ME$average_time_to_a_degree, MA$average_time_to_a_degree,
NH$average_time_to_a_degree, RI$average_time_to_a_degree, VT$average_time_to_a_degree,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="red",
main = "Violinplot of Average time to a Degree",
xlab ="State",
ylab = "Avg. Time")
vioplot(CT$average_price_for_low_income_students, ME$average_price_for_low_income_students,
MA$average_price_for_low_income_students, NH$average_price_for_low_income_students,
RI$average_price_for_low_income_students, VT$average_price_for_low_income_students,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="pink",
main = "Violinplot of Average Price For Low Income Students",
xlab ="State",
ylab = "Avg. Price")
vioplot(CT$Median_ACT_Score, ME$Median_ACT_Score, MA$Median_ACT_Score,
NH$Median_ACT_Score, RI$Median_ACT_Score, VT$Median_ACT_Score,
names = c("CT", "ME", "MA", "NH", "RI", "VT"),
col="green",
main = "Violinplot of Median ACT Score",
xlab ="State",
ylab = "Median ACT Score")
par(opar)
aov.fit1 <- aov(Median_SAT_Score ~ College_Location_States, data = new_england)
summary(aov.fit1)
aov.fit1 <- aov(Median_ACT_Score ~ College_Location_States, data = new_england)
summary(aov.fit1)
aov.fit2 <- aov(graduation_rate ~ College_Location_States, data = new_england)
summary(aov.fit2)
aov.fit3 <- aov(acceptance_rate ~ College_Location_States, data = new_england)
summary(aov.fit3)
new_england$College_Location_States <- factor(new_england$College_Location_States)
aov.fit <- aov(enrollment ~ College_Location_States, data = new_england)
summary(aov.fit)
(Tfit <- TukeyHSD(aov.fit))
library(multcomp)
opar <- par(no.readonly=TRUE)
tuk <- glht(aov.fit, linfct=mcp(College_Location_States="Tukey"))
par(mar=c(5,4,6,2))
plot(cld(tuk, level=.05), col="lightgrey")
par(opar)
opar <- par(no.readonly=TRUE)
tuk <- glht(aov.fit, linfct=mcp(College_Location_States="Tukey"))
par(mar=c(5,4,6,2))
plot(cld(tuk, level=.05), col="lightgrey")
par(opar)
library(psych)
library(vioplot)
library(multcomp)
library(psych)
library(vioplot)
library(multcomp)
library(car)
library(psych)
library(vioplot)
library(multcomp)
library(car)
fit.lm <- lm(enrollment ~ College_Location_States, data = new_england)
qqPlot(fit.lm$residuals, main="Q-Q Plot")
bartlett.test(enrollment ~ College_Location_States, data = new_england)
outlierTest(aov.fit)
college_df$SAT_ACT_required_for_Fall_2021 <- ifelse(college_df$SAT_ACT_required_for_Fall_2021 == "yes", 1, 0)
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,][!var]
College.validate <- college_df[-train,][!var]
logistic_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(logistic_model)
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
prob <- predict(log_model, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
logRegPrivate.step <- step(log_model, direction="backward")
summary(logRegPrivate.step)
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
set.seed(25)
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,][!var]
College.validate <- college_df[-train,][!var]
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
var <- names(college_df) %in% c("regular_application", "college_names", "College_Location_Town", "College_Location_States")
set.seed(1000)
train <- sample(nrow(college_df), 0.8*nrow(college_df))
College.train <- college_df[train,][!var]
College.validate <- college_df[-train,][!var]
log_model <- glm(SAT_ACT_required_for_Fall_2021 ~ ., family = binomial(), College.train)
summary(log_model)
prob <- predict(log_model, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf
logRegPrivate.step <- step(log_model, direction="backward")
summary(logRegPrivate.step)
prob <- predict(logRegPrivate.step, College.validate, type="response")
logit.pred <- factor(prob > .5, labels=c("No", "Yes"))
table(logit.pred)
logit.perf2 <- table(College.validate$SAT_ACT_required_for_Fall_2021, logit.pred,
dnn=c("Actual", "Predicted"))
logit.perf2
performance <- function(table, n=2){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fn)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste("Sensitivity = ", round(sensitivity, n) ,
"\nSpecificity = ", round(specificity, n),
"\nPositive Predictive Value = ", round(ppp, n),
"\nNegative Predictive Value = ", round(npp, n),
"\nAccuracy = ", round(hitrate, n), "\n", sep="")
cat(result)
}
performance(logit.perf)
performance(logit.perf2)
